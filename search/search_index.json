{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview A distributed key-value in-memory store system with table concept. https://distkv.com Project Description Distkv project is a distributed key-value in-memory database system. Besides these features, Distkv supports table concept which looks like tables in relational databases. It also supports a rich ecosystem, named Pine , which has many easy-to-use and out-of-the-box components for Web application and micro-service. For full documentation visit distkv.com . Awesome Features Redis-like data structure Table concept based on kv store Strong consistency model Easy to use clients Strong ecosystem for Web application and micro-service Quick Started 1. Install Distkv First make sure you have the python environment. Then running the following command to install the Distkv locally: pip install -e deploy/python -v 2. Start Distkv server Running the following command to start the Distkv server. $ dkv-server 3. Start Distkv command line tool Running the following command to start the command line tool of a Distkv client. $ dkv-cli 4. Command Line Tool Once you started the command line tool dkv-cli successfully, type the following command to enjoy the trip of Distkv. $ dkv-cli > str.put k1 v2 $ dkv-cli > ok $ dkv-cli > str.get k1 $ dkv-cli > v1 Client SDK Now we support both Java Client SDK and Java Async Client SDK . We are working in progress to support other languages SDK. Configure you dependency of Distkv client in pom.xml : <dependency> <groupId>com.distkv</groupId> <artifactId>distkv-client</artifactId> <version>0.1.3</version> </dependency> To use Distkv client in Java, see the following examples: Java Client SDK Example Java Async Client SDK Example","title":"Overview"},{"location":"#overview","text":"A distributed key-value in-memory store system with table concept. https://distkv.com","title":"Overview"},{"location":"#project-description","text":"Distkv project is a distributed key-value in-memory database system. Besides these features, Distkv supports table concept which looks like tables in relational databases. It also supports a rich ecosystem, named Pine , which has many easy-to-use and out-of-the-box components for Web application and micro-service. For full documentation visit distkv.com .","title":"Project Description"},{"location":"#awesome-features","text":"Redis-like data structure Table concept based on kv store Strong consistency model Easy to use clients Strong ecosystem for Web application and micro-service","title":"Awesome Features"},{"location":"#quick-started","text":"","title":"Quick Started"},{"location":"#1-install-distkv","text":"First make sure you have the python environment. Then running the following command to install the Distkv locally: pip install -e deploy/python -v","title":"1. Install Distkv"},{"location":"#2-start-distkv-server","text":"Running the following command to start the Distkv server. $ dkv-server","title":"2. Start Distkv server"},{"location":"#3-start-distkv-command-line-tool","text":"Running the following command to start the command line tool of a Distkv client. $ dkv-cli","title":"3. Start Distkv command line tool"},{"location":"#4-command-line-tool","text":"Once you started the command line tool dkv-cli successfully, type the following command to enjoy the trip of Distkv. $ dkv-cli > str.put k1 v2 $ dkv-cli > ok $ dkv-cli > str.get k1 $ dkv-cli > v1","title":"4. Command Line Tool"},{"location":"#client-sdk","text":"Now we support both Java Client SDK and Java Async Client SDK . We are working in progress to support other languages SDK. Configure you dependency of Distkv client in pom.xml : <dependency> <groupId>com.distkv</groupId> <artifactId>distkv-client</artifactId> <version>0.1.3</version> </dependency> To use Distkv client in Java, see the following examples: Java Client SDK Example Java Async Client SDK Example","title":"Client SDK"},{"location":"command_guide/","text":"Introduction Distkv is a type-oriented database system. There are several concepts in Distkv that looks like the basic collections. We have 6 concepts string , list , set , dict , sortedlist and table yet. In this section, you will learn the grammer of these basic concepts in Distkv, and will learn how to use these concepts as examples as well. 1. String Concept Put a string value into Distkv store. str.put key value example: $ dkv-cli > str.put k1 v1 $ dkv-cli > ok Get a string value from Distkv store. str.get key example: dkv-cli > str.get k1 dkv-cli > v1 Drop a string value from Distkv store. str.drop key example: dkv-cli > str.drop k1 dkv-cli > ok dkv-cli > str.get k1 dkv-cli > errorCode: A100; Detail: The key k1 is not found in the store. 2. List Concept Put a list into Distkv store. list.put key value1 [value2 [value3 [...]]] example: dkv-cli > list.put k1 v1 v2 v3 dkv-cli > ok Get a list from Distkv store. list.get key example: dkv-cli > list.get k1 dkv-cli > [v1, v2, v3] Get a range of items of the list from Distkv store. # Note that it's excluding the `end_index`. list.get key from_index end_index example: dkv-cli > list.get k1 0 2 dkv-cli > [v1, v2] Get one item of the list from Distkv store. list.get key index example: dkv-cli > list.get k1 1 dkv-cli > v1 Put items into the front of the list. list.lput key value1 [value2 [value3 [...]]] example: dkv-cli > list.lput \"k1\" \"v4\" \"v5\" \"v6\" dkv-cli > ok Put items into the back of the list. list.rput key value1 [value2 [value3 [...]]] example: dkv-cli > list.rput \"k1\" \"v7\" dkv-cli > ok Remove item from the list with the given index. list.ldel key index example: dkv-cli > list.ldel \"k1\" 2 dkv-cli > ok Remove item from the back of the list with the given back index. list.rdel key back_index If the list is [1, 2, 3] and the given number is 0, item 3 will be removed. example: dkv-cli > list.rdel \"k1\" 2 dkv-cli > ok Get the list from Distkv store. list.get key example: dkv-cli > list.get \"k1\" dkv-cli > [\"v6\", \"v1\", \"v2\"] 3. Set concept dkv-cli > set.put \"k1\" \"v1\" \"v2\" \"v3\" dkv-cli > ok dkv-cli > set.get \"k1\" dkv-cli > {\"v1\", \"v2\", \"v3\"} dkv-cli > set.del \"k1\" \"v1\" dkv-cli > ok dkv-cli > set.get \"k1\" dkv-cli > {\"v2\", \"v3\"} dkv-cli > set.exists \"k1\" \"v2\" dkv-cli > true dkv-cli > set.exists \"k1\" \"v4\" dkv-cli > false dkv-cli > set.drop \"k1\" dkv-cli > ok 4. Dict concept dkv-cli > dict.put \"dict1\" \"k1\" \"v1\" \"k2\" \"v2\" dkv-cli > ok dkv-cli > dict.get \"dict1\" dkv-cli > { \"k1\" : \"v1\", \"k2\" : \"v2\"} dkv-cli > dict.get \"dict1\" \"k1\" dkv-cli > \"v1\" dkv-cli > dict.get \"dict1\" \"k1\" dkv-cli > \"v1\" dkv-cli > dict.del \"dict1\" \"k1\" dkv-cli > ok dkv-cli > dict.pop \"dict1\" \"k2\" dkv-cli > \"v2\" dkv-cli > dict.get \"dict1\" dkv-cli > [] dkv-cli > dict.drop \"dict1\" dkv-cli > ok 5. SortedList Concept 6. Table concept Define your data structure in a schema file named mytables.sc table TaskTable { [p]task_id: string; [i]driver_id: string; task_name: string; return_num: int; arguments: [string]; } table DriverTable { [p]driver_id: string; driver_name: string; actor_num: int; }; Start an distkv server and execute this command to create table: > dkv-cli -p 12344 # connect to distkv server > create TaskTable, DriverTable from mytables.sc Add data to the table: > TaskTable.add \"00001\", \"22222\", \"my_task\", 3, [\"1\", \"2\"] < ok > TaskTable.add \"00002\", \"99999\", \"my_task\", 3, [\"1\", \"2\"] < ok > TaskTable.add \"00003\", \"22222\", \"my_task\", 3, [\"1\", \"2\"] < ok > DriverTable.add \"22222\", \"my_driver\", 10 < ok Query all tasks by driver id: > TaskTable.query (*) when driver_id == \"22222\" < < task_id driver_id task_name num_return arguments < \"00001\" \"22222\" \"my_task\" 3 [\"1\", \"2\"] < \"00003\" \"22222\" \"my_task\" 3 [\"1\", \"2\"] < 2 records","title":"Command Guide"},{"location":"command_guide/#introduction","text":"Distkv is a type-oriented database system. There are several concepts in Distkv that looks like the basic collections. We have 6 concepts string , list , set , dict , sortedlist and table yet. In this section, you will learn the grammer of these basic concepts in Distkv, and will learn how to use these concepts as examples as well.","title":"Introduction"},{"location":"command_guide/#1-string-concept","text":"Put a string value into Distkv store. str.put key value example: $ dkv-cli > str.put k1 v1 $ dkv-cli > ok Get a string value from Distkv store. str.get key example: dkv-cli > str.get k1 dkv-cli > v1 Drop a string value from Distkv store. str.drop key example: dkv-cli > str.drop k1 dkv-cli > ok dkv-cli > str.get k1 dkv-cli > errorCode: A100; Detail: The key k1 is not found in the store.","title":"1. String Concept"},{"location":"command_guide/#2-list-concept","text":"Put a list into Distkv store. list.put key value1 [value2 [value3 [...]]] example: dkv-cli > list.put k1 v1 v2 v3 dkv-cli > ok Get a list from Distkv store. list.get key example: dkv-cli > list.get k1 dkv-cli > [v1, v2, v3] Get a range of items of the list from Distkv store. # Note that it's excluding the `end_index`. list.get key from_index end_index example: dkv-cli > list.get k1 0 2 dkv-cli > [v1, v2] Get one item of the list from Distkv store. list.get key index example: dkv-cli > list.get k1 1 dkv-cli > v1 Put items into the front of the list. list.lput key value1 [value2 [value3 [...]]] example: dkv-cli > list.lput \"k1\" \"v4\" \"v5\" \"v6\" dkv-cli > ok Put items into the back of the list. list.rput key value1 [value2 [value3 [...]]] example: dkv-cli > list.rput \"k1\" \"v7\" dkv-cli > ok Remove item from the list with the given index. list.ldel key index example: dkv-cli > list.ldel \"k1\" 2 dkv-cli > ok Remove item from the back of the list with the given back index. list.rdel key back_index If the list is [1, 2, 3] and the given number is 0, item 3 will be removed. example: dkv-cli > list.rdel \"k1\" 2 dkv-cli > ok Get the list from Distkv store. list.get key example: dkv-cli > list.get \"k1\" dkv-cli > [\"v6\", \"v1\", \"v2\"]","title":"2. List Concept"},{"location":"command_guide/#3-set-concept","text":"dkv-cli > set.put \"k1\" \"v1\" \"v2\" \"v3\" dkv-cli > ok dkv-cli > set.get \"k1\" dkv-cli > {\"v1\", \"v2\", \"v3\"} dkv-cli > set.del \"k1\" \"v1\" dkv-cli > ok dkv-cli > set.get \"k1\" dkv-cli > {\"v2\", \"v3\"} dkv-cli > set.exists \"k1\" \"v2\" dkv-cli > true dkv-cli > set.exists \"k1\" \"v4\" dkv-cli > false dkv-cli > set.drop \"k1\" dkv-cli > ok","title":"3. Set concept"},{"location":"command_guide/#4-dict-concept","text":"dkv-cli > dict.put \"dict1\" \"k1\" \"v1\" \"k2\" \"v2\" dkv-cli > ok dkv-cli > dict.get \"dict1\" dkv-cli > { \"k1\" : \"v1\", \"k2\" : \"v2\"} dkv-cli > dict.get \"dict1\" \"k1\" dkv-cli > \"v1\" dkv-cli > dict.get \"dict1\" \"k1\" dkv-cli > \"v1\" dkv-cli > dict.del \"dict1\" \"k1\" dkv-cli > ok dkv-cli > dict.pop \"dict1\" \"k2\" dkv-cli > \"v2\" dkv-cli > dict.get \"dict1\" dkv-cli > [] dkv-cli > dict.drop \"dict1\" dkv-cli > ok","title":"4. Dict concept"},{"location":"command_guide/#5-sortedlist-concept","text":"","title":"5. SortedList Concept"},{"location":"command_guide/#6-table-concept","text":"Define your data structure in a schema file named mytables.sc table TaskTable { [p]task_id: string; [i]driver_id: string; task_name: string; return_num: int; arguments: [string]; } table DriverTable { [p]driver_id: string; driver_name: string; actor_num: int; }; Start an distkv server and execute this command to create table: > dkv-cli -p 12344 # connect to distkv server > create TaskTable, DriverTable from mytables.sc Add data to the table: > TaskTable.add \"00001\", \"22222\", \"my_task\", 3, [\"1\", \"2\"] < ok > TaskTable.add \"00002\", \"99999\", \"my_task\", 3, [\"1\", \"2\"] < ok > TaskTable.add \"00003\", \"22222\", \"my_task\", 3, [\"1\", \"2\"] < ok > DriverTable.add \"22222\", \"my_driver\", 10 < ok Query all tasks by driver id: > TaskTable.query (*) when driver_id == \"22222\" < < task_id driver_id task_name num_return arguments < \"00001\" \"22222\" \"my_task\" 3 [\"1\", \"2\"] < \"00003\" \"22222\" \"my_task\" 3 [\"1\", \"2\"] < 2 records","title":"6. Table concept"},{"location":"contributors/","text":"Maintainers Qing Wang Kai Wang Jie Mei Sen Tan Tuo Wang Yuxin Jin Contributors We are very grateful to all those who have contributed to Distkv . The all contributors are listed here .","title":"Contributors"},{"location":"contributors/#maintainers","text":"Qing Wang Kai Wang Jie Mei Sen Tan Tuo Wang Yuxin Jin","title":"Maintainers"},{"location":"contributors/#contributors","text":"We are very grateful to all those who have contributed to Distkv . The all contributors are listed here .","title":"Contributors"},{"location":"install/","text":"Environment The environment requirements of Distkv are: JDK >= 1.8.0 Maven >= 3.5.0 Python >= 3.5 Build From Source The following steps guide you to build a full version Distkv with dkv-server and dkv-cli . Clone the Distkv repository to your local. git clone https://github.com/distkv-project/distkv.git Enter the root directory of Distkv. cd distkv Install the dependencies of Distkv. bash scripts/install_dependencies.sh Install Distkv. pip install -e deploy/python -v After the 4 steps, the Distkv should be installed successfully on you local. Type dkv-server --version to have a check. Run Unit Tests If you'd like to run the unit tests of Distkv, you needn't build the full version Distkv. Just follow the following steps to build a simple version of Distkv and run the unit tests. Install the dependencies of Distkv. bash scripts/install_dependencies.sh Build with skiping tests. mvn clean install -DskipTests If you'd like to run the tests, use this command. mvn test If there is no error appearing, congratulations, you have succeeded to build Distkv and pass all tests.","title":"Install"},{"location":"install/#environment","text":"The environment requirements of Distkv are: JDK >= 1.8.0 Maven >= 3.5.0 Python >= 3.5","title":"Environment"},{"location":"install/#build-from-source","text":"The following steps guide you to build a full version Distkv with dkv-server and dkv-cli . Clone the Distkv repository to your local. git clone https://github.com/distkv-project/distkv.git Enter the root directory of Distkv. cd distkv Install the dependencies of Distkv. bash scripts/install_dependencies.sh Install Distkv. pip install -e deploy/python -v After the 4 steps, the Distkv should be installed successfully on you local. Type dkv-server --version to have a check.","title":"Build From Source"},{"location":"install/#run-unit-tests","text":"If you'd like to run the unit tests of Distkv, you needn't build the full version Distkv. Just follow the following steps to build a simple version of Distkv and run the unit tests. Install the dependencies of Distkv. bash scripts/install_dependencies.sh Build with skiping tests. mvn clean install -DskipTests If you'd like to run the tests, use this command. mvn test If there is no error appearing, congratulations, you have succeeded to build Distkv and pass all tests.","title":"Run Unit Tests"},{"location":"release_notes/","text":"Release 0.1.3 date: 22 Feb 2020 Features Implement DstSortedListLinkedImpl for sorted list (#378) Add Distkv docker support (#411) Refine client with 1 client instance for all concepts (#413) Add BSD-3-clause LICENSE (#422) Support that master sync the requests to slaves (#435) Upgrade protobuf to proto3 (#458) Enable io thread only for dousi server (#460) Refine the relationship between worker, worker pool and store runtime (#467) Remove legacy table concept (#485) Support namespace filter for client to allow key conflicts (#504) Make SyncClient wrap the AsyncClient. (#506) Add namespace command executor (#508) The POC of non heap hash map for store. (#507) [Pine] Init pine module as the ecosystem of Distkv. (#518) Add deactive namespace support (#521) [Pine] Support PineTopper as a component of distkv ecosystem. (#520) Bug Fix Fix jmh bug (#481) Fix SortedListLinkedImpl bug (#487) Fix start dkv server and cli not work (#490) Fix keyboardinterrept exception (#512) Fix package wheel and deploy (#519) Release 0.1.2 date: 29 Dec 2019 Features Support asynchronous services.(#294 ) Support Dst asynchronous client.(#333 #340 #341 ) Enable new DstExecutor.(#314 #294 #321 #342 #343 #347 ) Introduce Dmeta Module to Dst.(#290 ) Introduce drpc to replace brpc.(#291 #307 #345 #364 ) Support Dst Error code System.(#306 ) Use HashMap instead of ConcurrentHashMap in core module.(#350 ) Refactor the Dst core module.(#352 #316 #361 #371 ) Refine and optimize the API.(#322 #317 #325 #328 #339 ) Support Dst configuration classes.(#387 ) Bug Fix Fix command line tool.(#296 ) Fix client disconnection.(#319 ) Fix unexpected output in the command line.(#358 ) Fix the bug of out of index of the the shard index.(#365 ) Fix list removeRange.(#389 ) Release 0.1.1 date: 30 Nov 2019 Features: Support DstNewSQL, Parser and new client tool with antlr4(#236 #237 #242 #249 #264 #265 #263 #266 ) Support table concept in core module (#155 ) Support SortedList in core module (#186 ) Support DstConcurrentQueue interface and DefaultConcurrentQueue (#248 ) Refine rpc services (#251 #260 #255 ) Rename group id from org.dst to com.distkv.dst(#282 ) Release 0.1.0 date: 22 Sep 2019 Features: Support Redis-like structure: str, set, list and dict. Support dst-cli client tool. Support Java client SDK with sync client.","title":"Release Notes"},{"location":"release_notes/#release-013","text":"date: 22 Feb 2020","title":"Release 0.1.3"},{"location":"release_notes/#features","text":"Implement DstSortedListLinkedImpl for sorted list (#378) Add Distkv docker support (#411) Refine client with 1 client instance for all concepts (#413) Add BSD-3-clause LICENSE (#422) Support that master sync the requests to slaves (#435) Upgrade protobuf to proto3 (#458) Enable io thread only for dousi server (#460) Refine the relationship between worker, worker pool and store runtime (#467) Remove legacy table concept (#485) Support namespace filter for client to allow key conflicts (#504) Make SyncClient wrap the AsyncClient. (#506) Add namespace command executor (#508) The POC of non heap hash map for store. (#507) [Pine] Init pine module as the ecosystem of Distkv. (#518) Add deactive namespace support (#521) [Pine] Support PineTopper as a component of distkv ecosystem. (#520)","title":"Features"},{"location":"release_notes/#bug-fix","text":"Fix jmh bug (#481) Fix SortedListLinkedImpl bug (#487) Fix start dkv server and cli not work (#490) Fix keyboardinterrept exception (#512) Fix package wheel and deploy (#519)","title":"Bug Fix"},{"location":"release_notes/#release-012","text":"date: 29 Dec 2019","title":"Release 0.1.2"},{"location":"release_notes/#features_1","text":"Support asynchronous services.(#294 ) Support Dst asynchronous client.(#333 #340 #341 ) Enable new DstExecutor.(#314 #294 #321 #342 #343 #347 ) Introduce Dmeta Module to Dst.(#290 ) Introduce drpc to replace brpc.(#291 #307 #345 #364 ) Support Dst Error code System.(#306 ) Use HashMap instead of ConcurrentHashMap in core module.(#350 ) Refactor the Dst core module.(#352 #316 #361 #371 ) Refine and optimize the API.(#322 #317 #325 #328 #339 ) Support Dst configuration classes.(#387 )","title":"Features"},{"location":"release_notes/#bug-fix_1","text":"Fix command line tool.(#296 ) Fix client disconnection.(#319 ) Fix unexpected output in the command line.(#358 ) Fix the bug of out of index of the the shard index.(#365 ) Fix list removeRange.(#389 )","title":"Bug Fix"},{"location":"release_notes/#release-011","text":"date: 30 Nov 2019","title":"Release 0.1.1"},{"location":"release_notes/#features_2","text":"Support DstNewSQL, Parser and new client tool with antlr4(#236 #237 #242 #249 #264 #265 #263 #266 ) Support table concept in core module (#155 ) Support SortedList in core module (#186 ) Support DstConcurrentQueue interface and DefaultConcurrentQueue (#248 ) Refine rpc services (#251 #260 #255 ) Rename group id from org.dst to com.distkv.dst(#282 )","title":"Features:"},{"location":"release_notes/#release-010","text":"date: 22 Sep 2019","title":"Release 0.1.0"},{"location":"release_notes/#features_3","text":"Support Redis-like structure: str, set, list and dict. Support dst-cli client tool. Support Java client SDK with sync client.","title":"Features:"},{"location":"details/ErrorCode/","text":"Dst-ErrorCode Rule Introduction: Dst-ErrorCode provides specific rules to identify any error that was occurred during the execution. According to the rules of ErrorCode, users can clearly interpret the error class information from it. The meaning of each code: 1. First digit: Data class / Grammatical errors Digit Code Meaning 0 Meaningless/Error-free A String B List C Set D Dict E SortedList F Table X Grammatical error 2. Second digit: Common advanced error class Digit Code Meaning 0 Meaningless/Error-free 1 KeyNotFound 2 OutOfBounds 3. Third digit: Grammatical error identification Digit Code Meaning 0 Meaningless/Error-free 1 Incomprehensible input 2 Incorrect number of parameters 4. Fourth digit: Concrete error class Digit Code Meaning 0 Meaningless/Error-free 1 DictKeyNotFound 2 ListIndexOutOfBounds 3 ItemNotExistInSet 4 ItemNotFoundInSortedList 5 SortedListTopNumBePositive ErrorCode List: ErrorCode Meaning Suggest X010 Grammatical error. Incomprehensible input. Please check your command. X020 Grammatical error. Incorrect number of parameters. Please confirm whether the parameters of your command are correct. A100 String command. Key not found. Please check whether the content of 'key' is correct. B100 List command. Key not found. Please check whether the content of 'key' is correct. B202 List command. Out of bounds. List index out of bounds. Please confirm whether the 'index' parameter in your command is in the range of List. C100 Set command. Key not found. Please check whether the content of 'key' is correct. D100 Dict command. Key not found. Please check whether the content of 'key' is correct. D001 Dict command. Dict key not found. Please check whether the keyword in your command is correct.","title":"ErrorCode"},{"location":"details/ErrorCode/#dst-errorcode-rule","text":"","title":"Dst-ErrorCode Rule"},{"location":"details/ErrorCode/#introduction","text":"Dst-ErrorCode provides specific rules to identify any error that was occurred during the execution. According to the rules of ErrorCode, users can clearly interpret the error class information from it.","title":"Introduction:"},{"location":"details/ErrorCode/#the-meaning-of-each-code","text":"","title":"The meaning of each code:"},{"location":"details/ErrorCode/#1-first-digit-data-class-grammatical-errors","text":"Digit Code Meaning 0 Meaningless/Error-free A String B List C Set D Dict E SortedList F Table X Grammatical error","title":"1. First digit: Data class / Grammatical errors"},{"location":"details/ErrorCode/#2-second-digit-common-advanced-error-class","text":"Digit Code Meaning 0 Meaningless/Error-free 1 KeyNotFound 2 OutOfBounds","title":"2. Second digit: Common advanced error class"},{"location":"details/ErrorCode/#3-third-digit-grammatical-error-identification","text":"Digit Code Meaning 0 Meaningless/Error-free 1 Incomprehensible input 2 Incorrect number of parameters","title":"3. Third digit: Grammatical error identification"},{"location":"details/ErrorCode/#4-fourth-digit-concrete-error-class","text":"Digit Code Meaning 0 Meaningless/Error-free 1 DictKeyNotFound 2 ListIndexOutOfBounds 3 ItemNotExistInSet 4 ItemNotFoundInSortedList 5 SortedListTopNumBePositive","title":"4. Fourth digit: Concrete error class"},{"location":"details/ErrorCode/#errorcode-list","text":"ErrorCode Meaning Suggest X010 Grammatical error. Incomprehensible input. Please check your command. X020 Grammatical error. Incorrect number of parameters. Please confirm whether the parameters of your command are correct. A100 String command. Key not found. Please check whether the content of 'key' is correct. B100 List command. Key not found. Please check whether the content of 'key' is correct. B202 List command. Out of bounds. List index out of bounds. Please confirm whether the 'index' parameter in your command is in the range of List. C100 Set command. Key not found. Please check whether the content of 'key' is correct. D100 Dict command. Key not found. Please check whether the content of 'key' is correct. D001 Dict command. Dict key not found. Please check whether the keyword in your command is correct.","title":"ErrorCode List:"}]}