{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"ErrorCode/","text":"Dst-ErrorCode Rule Introduction: Dst-ErrorCode provides specific rules to identify any error that was occurred during the execution. According to the rules of ErrorCode, users can clearly interpret the error class information from it. The meaning of each code: 1. First digit: Data class / Grammatical errors Digit Code Meaning 0 Meaningless/Error-free A String B List C Set D Dict E SortedList F Table X Grammatical error 2. Second digit: Common advanced error class Digit Code Meaning 0 Meaningless/Error-free 1 KeyNotFound 2 OutOfBounds 3. Third digit: Grammatical error identification Digit Code Meaning 0 Meaningless/Error-free 1 Incomprehensible input 2 Incorrect number of parameters 4. Fourth digit: Concrete error class Digit Code Meaning 0 Meaningless/Error-free 1 DictKeyNotFound 2 ListIndexOutOfBounds 3 ItemNotExistInSet 4 ItemNotFoundInSortedList 5 SortedListTopNumBePositive ErrorCode List: ErrorCode Meaning Suggest X010 Grammatical error. Incomprehensible input. Please check your command. X020 Grammatical error. Incorrect number of parameters. Please confirm whether the parameters of your command are correct. A100 String command. Key not found. Please check whether the content of 'key' is correct. B100 List command. Key not found. Please check whether the content of 'key' is correct. B202 List command. Out of bounds. List index out of bounds. Please confirm whether the 'index' parameter in your command is in the range of List. C100 Set command. Key not found. Please check whether the content of 'key' is correct. D100 Dict command. Key not found. Please check whether the content of 'key' is correct. D001 Dict command. Dict key not found. Please check whether the keyword in your command is correct.","title":"ErrorCode"},{"location":"ErrorCode/#dst-errorcode-rule","text":"","title":"Dst-ErrorCode Rule"},{"location":"ErrorCode/#introduction","text":"Dst-ErrorCode provides specific rules to identify any error that was occurred during the execution. According to the rules of ErrorCode, users can clearly interpret the error class information from it.","title":"Introduction:"},{"location":"ErrorCode/#the-meaning-of-each-code","text":"","title":"The meaning of each code:"},{"location":"ErrorCode/#1-first-digit-data-class-grammatical-errors","text":"Digit Code Meaning 0 Meaningless/Error-free A String B List C Set D Dict E SortedList F Table X Grammatical error","title":"1. First digit: Data class / Grammatical errors"},{"location":"ErrorCode/#2-second-digit-common-advanced-error-class","text":"Digit Code Meaning 0 Meaningless/Error-free 1 KeyNotFound 2 OutOfBounds","title":"2. Second digit: Common advanced error class"},{"location":"ErrorCode/#3-third-digit-grammatical-error-identification","text":"Digit Code Meaning 0 Meaningless/Error-free 1 Incomprehensible input 2 Incorrect number of parameters","title":"3. Third digit: Grammatical error identification"},{"location":"ErrorCode/#4-fourth-digit-concrete-error-class","text":"Digit Code Meaning 0 Meaningless/Error-free 1 DictKeyNotFound 2 ListIndexOutOfBounds 3 ItemNotExistInSet 4 ItemNotFoundInSortedList 5 SortedListTopNumBePositive","title":"4. Fourth digit: Concrete error class"},{"location":"ErrorCode/#errorcode-list","text":"ErrorCode Meaning Suggest X010 Grammatical error. Incomprehensible input. Please check your command. X020 Grammatical error. Incorrect number of parameters. Please confirm whether the parameters of your command are correct. A100 String command. Key not found. Please check whether the content of 'key' is correct. B100 List command. Key not found. Please check whether the content of 'key' is correct. B202 List command. Out of bounds. List index out of bounds. Please confirm whether the 'index' parameter in your command is in the range of List. C100 Set command. Key not found. Please check whether the content of 'key' is correct. D100 Dict command. Key not found. Please check whether the content of 'key' is correct. D001 Dict command. Dict key not found. Please check whether the keyword in your command is correct.","title":"ErrorCode List:"},{"location":"build/","text":"The environment requirements of Dst are: JDK >= 1.8.0 maven >= 3.5.0 protobuf == 2.5.0 (Not support 3.0 yet) Then use the following command to build Dst: mvn clean install -DskipTests If there is no error appearing, congratulations, you have succeeded to build Dst. If you'd like to run the tests, use this command: mvn test next: Run Dst server","title":"Build"},{"location":"client_tool/","text":"The Dst client tool is an useful tool to access a Dst server.","title":"Client tool"},{"location":"usage/","text":"Usage In this section, you can learn some basic concepts in Dst, and learn how to use these concepts as well. 1. String concept Put a string value into the Dst store. str.put key value example: distkv-cli > str.put k1 v1 distkv-cli > ok Get a string value from Dst store. str.get key example: distkv-cli > str.get k1 distkv-cli > v1 Drop a string from the Dst store. str.drop key example: distkv-cli > str.drop k1 distkv-cli > ok distkv-cli > str.get k1 distkv-cli > Error(A202): The Key `k1` is not found in the store. 2. List concept Put a list into Dst store. list.put key value1 [value2 [value3 [...]]] example: distkv-cli > list.put k1 v1 v2 v3 distkv-cli > ok Get a list from Dst store. list.get key example: distkv-cli > list.get k1 distkv-cli > [v1, v2, v3] Get a range of items of the list from Dst store. # Note that it's excluding the `end_index`. list.get key from_index end_index example: distkv-cli > list.get k1 0 2 distkv-cli > [v1, v2] Get one item of the list from Dst store. list.get key index example: distkv-cli > list.get k1 1 distkv-cli > v1 distkv-cli > list.lput \"k1\" \"v4\" \"v5\" \"v6\" distkv-cli > ok distkv-cli > list.rput \"k1\" \"v7\" distkv-cli > ok distkv-cli > list.ldel \"k1\" 2 distkv-cli > ok distkv-cli > list.rdel \"k1\" 2 distkv-cli > ok distkv-cli > list.get \"k1\" distkv-cli > [\"v6\", \"v1\", \"v2\"] #### 3. Set concept ```bash distkv-cli > set.put \"k1\" \"v1\" \"v2\" \"v3\" distkv-cli > ok distkv-cli > set.get \"k1\" distkv-cli > {\"v1\", \"v2\", \"v3\"} distkv-cli > set.del \"k1\" \"v1\" distkv-cli > ok distkv-cli > set.get \"k1\" distkv-cli > {\"v2\", \"v3\"} distkv-cli > set.exists \"k1\" \"v2\" distkv-cli > true distkv-cli > set.exists \"k1\" \"v4\" distkv-cli > false distkv-cli > set.drop \"k1\" distkv-cli > ok 4. Dict concept distkv-cli > dict.put \"dict1\" \"k1\" \"v1\" \"k2\" \"v2\" distkv-cli > ok distkv-cli > dict.get \"dict1\" distkv-cli > { \"k1\" : \"v1\", \"k2\" : \"v2\"} distkv-cli > dict.get \"dict1\" \"k1\" distkv-cli > \"v1\" distkv-cli > dict.get \"dict1\" \"k1\" distkv-cli > \"v1\" distkv-cli > dict.del \"dict1\" \"k1\" distkv-cli > ok distkv-cli > dict.pop \"dict1\" \"k2\" distkv-cli > \"v2\" distkv-cli > dict.get \"dict1\" distkv-cli > [] distkv-cli > dict.drop \"dict1\" distkv-cli > ok 5. Table concept Define your data structure in a schema file named mytables.sc table TaskTable { [p]task_id: string; [i]driver_id: string; task_name: string; return_num: int; arguments: [string]; } table DriverTable { [p]driver_id: string; driver_name: string; actor_num: int; }; Start an distkv server and execute this command to create table: > distkv-cli -p 12344 # connect to distkv server > create TaskTable, DriverTable from mytables.sc Add data to the table: > TaskTable.add \"00001\", \"22222\", \"my_task\", 3, [\"1\", \"2\"] < ok > TaskTable.add \"00002\", \"99999\", \"my_task\", 3, [\"1\", \"2\"] < ok > TaskTable.add \"00003\", \"22222\", \"my_task\", 3, [\"1\", \"2\"] < ok > DriverTable.add \"22222\", \"my_driver\", 10 < ok Query all tasks by driver id: > TaskTable.query (*) when driver_id == \"22222\" < < task_id driver_id task_name num_return arguments < \"00001\" \"22222\" \"my_task\" 3 [\"1\", \"2\"] < \"00003\" \"22222\" \"my_task\" 3 [\"1\", \"2\"] < 2 records","title":"Usage"},{"location":"usage/#usage","text":"In this section, you can learn some basic concepts in Dst, and learn how to use these concepts as well.","title":"Usage"},{"location":"usage/#1-string-concept","text":"Put a string value into the Dst store. str.put key value example: distkv-cli > str.put k1 v1 distkv-cli > ok Get a string value from Dst store. str.get key example: distkv-cli > str.get k1 distkv-cli > v1 Drop a string from the Dst store. str.drop key example: distkv-cli > str.drop k1 distkv-cli > ok distkv-cli > str.get k1 distkv-cli > Error(A202): The Key `k1` is not found in the store.","title":"1. String concept"},{"location":"usage/#2-list-concept","text":"Put a list into Dst store. list.put key value1 [value2 [value3 [...]]] example: distkv-cli > list.put k1 v1 v2 v3 distkv-cli > ok Get a list from Dst store. list.get key example: distkv-cli > list.get k1 distkv-cli > [v1, v2, v3] Get a range of items of the list from Dst store. # Note that it's excluding the `end_index`. list.get key from_index end_index example: distkv-cli > list.get k1 0 2 distkv-cli > [v1, v2] Get one item of the list from Dst store. list.get key index example: distkv-cli > list.get k1 1 distkv-cli > v1 distkv-cli > list.lput \"k1\" \"v4\" \"v5\" \"v6\" distkv-cli > ok distkv-cli > list.rput \"k1\" \"v7\" distkv-cli > ok distkv-cli > list.ldel \"k1\" 2 distkv-cli > ok distkv-cli > list.rdel \"k1\" 2 distkv-cli > ok distkv-cli > list.get \"k1\" distkv-cli > [\"v6\", \"v1\", \"v2\"] #### 3. Set concept ```bash distkv-cli > set.put \"k1\" \"v1\" \"v2\" \"v3\" distkv-cli > ok distkv-cli > set.get \"k1\" distkv-cli > {\"v1\", \"v2\", \"v3\"} distkv-cli > set.del \"k1\" \"v1\" distkv-cli > ok distkv-cli > set.get \"k1\" distkv-cli > {\"v2\", \"v3\"} distkv-cli > set.exists \"k1\" \"v2\" distkv-cli > true distkv-cli > set.exists \"k1\" \"v4\" distkv-cli > false distkv-cli > set.drop \"k1\" distkv-cli > ok","title":"2. List concept"},{"location":"usage/#4-dict-concept","text":"distkv-cli > dict.put \"dict1\" \"k1\" \"v1\" \"k2\" \"v2\" distkv-cli > ok distkv-cli > dict.get \"dict1\" distkv-cli > { \"k1\" : \"v1\", \"k2\" : \"v2\"} distkv-cli > dict.get \"dict1\" \"k1\" distkv-cli > \"v1\" distkv-cli > dict.get \"dict1\" \"k1\" distkv-cli > \"v1\" distkv-cli > dict.del \"dict1\" \"k1\" distkv-cli > ok distkv-cli > dict.pop \"dict1\" \"k2\" distkv-cli > \"v2\" distkv-cli > dict.get \"dict1\" distkv-cli > [] distkv-cli > dict.drop \"dict1\" distkv-cli > ok","title":"4. Dict concept"},{"location":"usage/#5-table-concept","text":"Define your data structure in a schema file named mytables.sc table TaskTable { [p]task_id: string; [i]driver_id: string; task_name: string; return_num: int; arguments: [string]; } table DriverTable { [p]driver_id: string; driver_name: string; actor_num: int; }; Start an distkv server and execute this command to create table: > distkv-cli -p 12344 # connect to distkv server > create TaskTable, DriverTable from mytables.sc Add data to the table: > TaskTable.add \"00001\", \"22222\", \"my_task\", 3, [\"1\", \"2\"] < ok > TaskTable.add \"00002\", \"99999\", \"my_task\", 3, [\"1\", \"2\"] < ok > TaskTable.add \"00003\", \"22222\", \"my_task\", 3, [\"1\", \"2\"] < ok > DriverTable.add \"22222\", \"my_driver\", 10 < ok Query all tasks by driver id: > TaskTable.query (*) when driver_id == \"22222\" < < task_id driver_id task_name num_return arguments < \"00001\" \"22222\" \"my_task\" 3 [\"1\", \"2\"] < \"00003\" \"22222\" \"my_task\" 3 [\"1\", \"2\"] < 2 records","title":"5. Table concept"}]}